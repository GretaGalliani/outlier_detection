Passo a) Update clusters
S_vecchio <- vettore
Y <- data.frame
Xi_mu <- vettore
Xi_cov <- lista(matrici)
Xi_mu_star <- vettore
Xi_cov_star <- lista(matrici)
beta_old <- numero
theta_old <- numero
sigma_old <- numero
k_old <- numero

library(mvtnorm)

#Creo nel main una struttura che è lista di liste --> support <-- inizializzazione (ogni dato è un gruupo)
--> lista(liste(0:n))
#Devo inizializzare anche le frequenze iniziali

function <- (Support Y, Xi_mu, Xi_cov, beta_old, Xi_mu_star, Xi_cov_star, theta_old, sigma_old, k_old)
{
    n <- dim(Y)[1]
    S_new <-rep(0,n)
    k_new <- 0
    Xi_mu_new <- lista( di n vettori)
    Xi_cov_new <- list( di n matrici)

    for (i in 1:n)
    {
    
      prob <- rep(0:k_new+2,0) #0,1,...k_new, k_new+1
      prob[1] <- dens_contaminated(data[i],beta_old, nu_0, k_0, mu_0, delta_0, n) #j=0
      for (t in (2:k_new+1))
      {
        prob[t] <-dens_cluster_old(data[i], n_j, sigma_old, theta_old, Xi_mu_old_star[t-1]
                              Xi_cov_old_star[t-1],n,beta_old)
      }
      prob[k_new+2]<- dens_cluster_new(data[i], n_j, sigma_old, theta_old, beta_old,n, k_old)
      
      j <- sample(0:k_new+1,size=1,prob=prob)
      
      S_new[i] <- j
      Se frequenza si S_old[i] (o support) = 1 --> chiamo cancella (sistema support eliminando il gruppo j
      e spostando indietro gli altri, aggiornando k e xi & traslo Xi_mu_star, Xi_cov_star)
      Se nuovo gruppo --> creo nuova lista nel support
      Altrimenti --> sposto dato nel support se già esiste il gruppo
      
      
      if(j==k_new+1)
            {
                k_new=k_new+1
                
                mu_new <- construct_mu_new(??)
                Xi_mu_new[i] <- mu_new
                Xi_mu_star <- aggiungo mu_new
                
                cov_new <- construct_cov_new(??)
                Xi_cov_new[i] <- cov_new
                cov_new_star <- aggiungo cov_new
            }
        if(j in 1:k_new)
            {
              Xi_mu_new[i] <- Xi_mu_star[j]
              Xi_cov_new[i] <- Xi_cov_star[j]
            }
        } 
        
    Calcolo nuove frequenze --> dopo lo spostamento   
    }
}



# nu_0, mu_0,k_0, delta_0 parametri di NIW

function <- dens_contaminated(data, beta_old, nu_0, k_0, mu_0, delta_0,n)
{
  p <- dim(data)[1]
  x_medio <- mean(data)
  S = sum((data[i]-x_medio)*t((data[i]-x_medio)))
  nu_n <- nu_0 + n
  mu_n <- k_0/(n+k_0) * mu_0 + n/(k_0+n) * x 
  k_n <- k_0 + n 
  delta_n <- delta_0 + S + (k_0*n)/(k_0+n)*(x_medio-mu_0)*t(x_medio-mu_0)
  
  posterior <- (1-beta_old) *dmvt(data, sigma = (delta_n * (k_n+1))/(k_n*(nu_n-p+1)), 
                                df = nu_n-p+1, delta = nu_n, type = "shifted")  
  
  return posterior
}


function <- dens_cluster_old(data, n_j, sigma_old, theta_old, Xi_mu_old_star, Xi_cov_old_star,n)
{
  m1_bar <- c'è da scrivere funzione
  coeff <- beta_old * (n_j-sigma_old)/(theta_old+n-m1_bar-1)
  posterior <- coeff * dmnorm(data, mean=Xi_mu_star, varcov=Xi_cov_star)
  return posterior
}


function <- dens_cluster_new(data[i], n_j, sigma_old, theta_old, beta_old,n, k_old)
{

}






